# Nemo config file
# YAML format 
# - use null to return None in Python
# - note that YAML is fussy about large numbers: use e.g. 1.0e+14 for M500MSun (not 1e14)

# Valid units are uK or Jy/sr
# this should be a list of maps at different frequencies
# NOTE: surveyMask is optional
unfilteredMaps:
    - {mapFileName: "maps/TOnly_f150_daynight_all_map_mono.fits",
       weightsFileName: "maps/f150_daynight_all_div_mono.fits",
       obsFreqGHz: 148.0,
       units: 'uK',
       beamFileName: "Beams/171226/beam_profile_171226_pa3_f150_s16_3_310_instant.txt",
       addNoise: null,
       RADecSection: null,
       pointSourceMask: 'surveyAndPointSourceMask/pointSourceMask_full_all_multiDec.fits',
       surveyMask: 'surveyAndPointSourceMask/surveyMask_full_all_v3.fits'}
    - {mapFileName: "maps/TOnly_f090_daynight_all_map_mono.fits",
       weightsFileName: "maps/f090_daynight_all_div_mono.fits",
       obsFreqGHz: 90.0, 'units': 'uK',
       beamFileName: "Beams/171226/beam_profile_171226_pa3_f090_s16_3_320_instant.txt",
       addNoise: null,
       RADecSection: null,
       pointSourceMask: 'surveyAndPointSourceMask/pointSourceMask_full_all_multiDec.fits',
       surveyMask: 'surveyAndPointSourceMask/surveyMask_full_all_v3.fits'}

# MPI?
useMPI: False

# tileDeck options - cut-up each map into smaller sections, store in a multi-extension .fits file
makeTileDeck: True
tileOverlapDeg: 1.0

# User-defined tiles
# These will automatically be expanded by tileOverlapDeg, i.e., don't need to handle overlaps here
tileDefinitions:
    - {extName: '0_0', RADecSection: [122.7, 103.8, -61., -51.]}
    - {extName: '0_1', RADecSection: [103.8, 66.6, -61., -51.]}
    - {extName: '0_2', RADecSection: [66.6, 14.3, -61., -51.]}
    - {extName: '0_3', RADecSection: [14.3, 321., -61., -51.]}
    - {extName: '0_4', RADecSection: [321., 258., -61., -51.]}
    - {extName: '1_0', RADecSection: [117., 67.3, -51., -41.]}
    - {extName: '1_1', RADecSection: [67.3, 13.3, -51., -41.]}
    - {extName: '1_2', RADecSection: [13.3, 334.2, -51., -41.]}
    - {extName: '1_3', RADecSection: [334.2, 300., -51., -41.]}
    - {extName: '1_4', RADecSection: [300., 264., -51., -41.]}
    - {extName: '2_0', RADecSection: [110., 68.2, -41., -31.]}
    - {extName: '2_1', RADecSection: [68.2, 15.5, -41., -31.]}
    - {extName: '2_2', RADecSection: [15.5, 334.2, -41., -31.]}
    - {extName: '2_3', RADecSection: [334.2, 300., -41., -31.]}
    - {extName: '2_4', RADecSection: [300., 266., -41., -31.]}
    - {extName: '3_0', RADecSection: [110., 45., -31., -21.]}
    - {extName: '3_1', RADecSection: [45., 345., -31., -21.]}
    - {extName: '3_2', RADecSection: [345., 276., -31., -21.]}
    - {extName: '4_0', RADecSection: [102., 45., -21., -11.]}
    - {extName: '4_1', RADecSection: [45., 345., -21., -11.]}
    - {extName: '4_2', RADecSection: [345., 281., -21., -11.]}
    - {extName: '5_0', RADecSection: [86., 45., -11., 5.5]}
    - {extName: '5_1', RADecSection: [45., 345., -11., 5.5]}
    - {extName: '5_2', RADecSection: [345., 291., -11., 5.5]}
    - {extName: '5A_0', RADecSection: [179.9, 105., -6., 5.5]}
    - {extName: '5A_1', RADecSection: [262., 217., -6., 5.5]}
    - {extName: '5A_2', RADecSection: [217., 180.1, -6., 5.5]}
    - {extName: '6_0', RADecSection: [179.9, 100., 5.5, 22.]}
    - {extName: '6_1', RADecSection: [81., 6., 5.5, 22.]}
    - {extName: '6_2', RADecSection: [6., 298., 5.5, 22.]}
    - {extName: '6_3', RADecSection: [269., 217., 5.5, 22.]}
    - {extName: '6_4', RADecSection: [217., 180.1, 5.5, 22.]}

# Corresponding regions in tiles to use for noise part of matched filter
# IF these are modified, tileDeck files will need to be re-made (delete them and rerun nemo)
# Format for each entry: extName: [RAMin, RAMax, decMin, decMax]
tileNoiseRegions:
    {'0_0': [111., 103., -59., -52.],
     '0_1': [97., 73., -59., -52.],
     '0_2': [61., 45., -59., -52.],
     '0_3': [5., 350., -59., -52.],
     '0_4': [318., 300., -59., -52.],
     '1_0': [107., 90., -49., -42.],
     '1_1': [34., 16., -49., -42.],
     '1_2': [10., 352., -49., -42.],
     '1_3': [332., 315., -49., -42.],
     '1_4': [298., 280., -49., -42.],
     '2_0': [104., 88., -40., -32.],
     '2_1': [34., 16., -40., -32.],
     '2_2': [10., 352., -41., -33.],
     '2_3': [332., 315., -40., -32.],
     '2_4': [298., 280., -40., -32.],
     '3_0': [85., 60., -30., -22.],
     '3_1': [34., 16., -30., -22.],
     '3_2': [320., 305., -30., -22.],
     '4_0': [84., 55., -20., -12.],
     '4_1': [30., 10., -20., -12.],
     '4_2': [315., 295., -20., -12.],
     '5_0': [77., 57., -5., 4.],
     '5_1': [32.3, 38.2, -7.5, -2.5],
     '5_2': [320., 300., -7., 2.],
     '5A_0': [170., 140., -4., 4.],
     '5A_1': [234., 218., -4., 2.],
     '5A_2': [216., 200., -4., 2.],
     '6_0': [150., 130., 10., 18.],
     '6_1': [30., 10., 10., 18.],
     '6_2': [357., 340., 7., 16.],
     '6_3': [236., 218., 7., 16.],
     '6_4': [215., 195., 7., 16.]}

# Use this to test on only a particular set of tiles
# i.e., all operations will only be performed on these tiles (respected by nemo, nemoMass, nemoSelFn)
extNameList: ['2_1', '2_2', '3_1', '5_1']

# Detection/catalog options
# Set useInterpolator; True for sub-pixel flux and SNR measurements
thresholdSigma: 4.0
minObjPix: 1
findCenterOfMass: True
useInterpolator: True
rejectBorder: 0
objIdent: 'ACT-CL'
longNames: False
catalogCuts: ['SNR > 4.0']

# Photometry options
photometryOptions: {photFilter: 'Arnaud_M2e14_z0p4'}

# Optionally override the GNFW parameters - if not present, Arnaud et al. (2010) parameters are used
# The example below is for the Planck Pressure Profile (PPP)
#GNFWParams: {P0: 6.41, c500: 1.81, gamma: 0.31, alpha: 1.33, beta: 4.13, tol: 1e-7, npts: 100}

# Mass measurement options - used by nemoMass and nemoSelFn scripts
# Writes out .fits file to nemoOutDir/nemoOutDir_M500.fits
# redshiftCatalog:  A .fits table containing name, RADeg, decDeg, redshift, redshiftErr columns
# forcedPhotometry: If True, calc mass based on extracted y0~ in 'photFilter' map at RADeg, decDeg as given in redshiftCatalog
#                   If False, cross match redshiftCatalog with optimal catalog made by nemo
# Q:                If 'H13', use fit to Q from results presented in H13
#                   If 'fit', use fit to (theta, Q) done by nemo for 'photFilter' kernel
# tenToA0, B0, Mpivot, sigma_int: Fixed scaling relation options (see H13 or ACTPol paper)
# rescaleFactor, rescaleFactorErr: For MCal masses, as in the ACTPol paper (i.e., just rescales M500 results by 1/rescaleFactor)
massOptions: {tenToA0: 4.95e-5, 
              B0: 0.08, 
              Mpivot: 3.0e+14, 
              sigma_int: 0.2,
              rescaleFactor: 0.68, 
              rescaleFactorErr: 0.11,
              redshiftCatalog: "MF-MultiScale-Hybrid-MJH_redshifts_20180521.fits", 
              forcedPhotometry: False, 
              Q: 'fit'}

# Selection function options - only used by the nemoSelFn script
# NOTE: could eventually add 'completenessFraction' to 'massLimitMaps', which is why that's a dictionary list
selFnOptions: {fixed_SNR_cut: 5.0, 
               massLimitMaps: [{z: 0.5}]}

# Filter definitions
# NOTE: Arnaud_M5p5e14_z0p2 gives theta500 = 5.9', for comparison with H13
mapFilters:
    - {label: "Arnaud_M2e14_z0p4",
       class: "ArnaudModelRealSpaceMatchedFilter",
       params: {M500MSun: 2.0e+14, 
                z: 0.4,
                noiseParams: {method: "max(dataMap,CMB)",
                              matchedFilterClass: 'ArnaudModelMatchedFilter',
                              RADecSection: "tileNoiseRegions",
                              kernelMaxArcmin: 7.,
                              symmetrize: False, 
                              noiseGridArcmin: 20.,
                              saveHighPassMap: False,
                              saveRMSMap: True},
                bckSub: True, 
                outputUnits: 'yc'}}

# Set this to True to generate a sky sim (with noise), run all the filters over it, and measure contamination
# Set numSkySims to number required - we need to average over many as results vary a fair bit
estimateContaminationFromSkySim: False
numSkySims: 1

# Set this to True to estimate contamination by running cluster finder over inverted maps
# This is sensitive to how well point source masking is done
estimateContaminationFromInvertedMaps: False

