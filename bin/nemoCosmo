#!/usr/bin/env python

"""

Example of using nemo selection function stuff for cosmology.

NOTE: relies on global variables:
- selFn
- tab

Using Cobaya as the sampler.

"""

import os
import sys
os.environ["OMP_NUM_THREADS"] = "1"                 # Needed for multiprocessing / MPI to be reliable
#print("Running under python: %s" % (sys.version))
import numpy as np
import pylab as plt
import astropy.table as atpy
from astLib import *
from scipy import stats
from scipy import interpolate
from scipy.special import factorial
from nemo import completeness
from nemo import signals
import argparse
import time
from collections import OrderedDict as odict
from cobaya.run import run
from getdist.mcsamples import MCSamplesFromCobaya
import getdist.plots as gdplt

#import IPython

# Extreme debugging (better for multiprocessing stuff to crash where we can see it)
import warnings
#warnings.filterwarnings("error")
    
#-------------------------------------------------------------------------------------------------------------
def lnprob(H0, Om0, sigma8, Ob0, tenToA0, B0, Mpivot, sigma_int):
    """Log likelihood function for use with Cobaya.
        
    """
    
    # This can fail if wander outside parameter space where mass function is defined
    try:
        selFn.update(H0, Om0, Ob0, sigma8, scalingRelationDict = {'tenToA0': tenToA0, 'B0': B0, 
                                                                  'Mpivot': Mpivot, 'sigma_int': sigma_int})
    except:
        return -np.inf
    
    # Apply completeness only to predicted counts (selection is already applied to observed)
    predMz=selFn.compMz*selFn.mockSurvey.clusterCount
    
    # Do we really need to do this step? We'd gain > factor 2 in speed if we didn't
    # (i.e., if we just splatted onto the grid as a straight 2d histogram)
    try:
        obsMz=selFn.projectCatalogToMz(tab)
    except:
        return -np.inf
    
    # Poisson probability in (M, z) grid
    # (this is the similar to what Planck does, e.g., Planck 2015 XXIV eqn. 15)
    # NOTE: Planck only has 10 x 5 bins, and bins by z, S/N (q in Planck paper)
    #mask=np.greater(predMz, 0)
    mask=np.logical_and(np.greater(obsMz, 0), np.greater(predMz, 0))
    lnlike=np.sum(obsMz[mask]*np.log(predMz[mask])-predMz[mask]-np.log(factorial(obsMz[mask])))
        
    return lnlike

#------------------------------------------------------------------------------------------------------------
def makeGetDistPlot(cosmoOutDir):
    """Makes a corner plot using GetDist.
    
    """
    
    # Plot
    import getdist.plots as gplot
    g=gplot.getSubplotPlotter(chain_dir = cosmoOutDir)
    roots=['chain']
    params=['H0', 'Om0', 'sigma8']
    param_3d = None
    g.triangle_plot(roots, params, plot_3d_with_param=param_3d, filled=True, shaded=False)
    g.export(fname=cosmoOutDir+os.path.sep+"cornerplot.pdf")
    g.export(fname=cosmoOutDir+os.path.sep+"cornerplot.png")
    
#------------------------------------------------------------------------------------------------------------
if __name__ == '__main__':

    parser=argparse.ArgumentParser("nemoCosmo")
    parser.add_argument("configFileName", help="""A .yml configuration file.""")
    parser.add_argument("catalogFileName", help="""Catalog file name, in .fits format, as produced by nemo
                        or nemoMock.""")
    parser.add_argument("selFnDir", help="""Directory containing files needed for computing the selection 
                        function.""")
    parser.add_argument("maxSamples", help="""Maximum number of samples.""", type = int)
    parser.add_argument("-o", "--output-dir", dest="cosmoOutDir", help="""Name of directory in which
                        to store output chains and plots (default: cosmo_catalogFileName_SNRCut, where
                        catalogFileName is stripped of the .fits extension).""", default = None)
    parser.add_argument("-S", "--SNR-cut", dest = "SNRCut", help="""Use only clusters with fixed_SNR > 
                        this value.""", default = 5.0, type = float)
    parser.add_argument("-b", "--burn", dest = "numToBurn", help="""Number of samples to burn.""", 
                        default = 50, type = int)
    args = parser.parse_args()
    
    configFileName=args.configFileName
    tabFileName=args.catalogFileName
    selFnDir=args.selFnDir
    maxSamples=args.maxSamples
    SNRCut=args.SNRCut
    cosmoOutDir=args.cosmoOutDir
    numToBurn=args.numToBurn
    
    tab=atpy.Table().read(tabFileName)
    if 'redshift' not in tab.keys():
        raise Exception("no 'redshift' column in catalog")
    
    print(">>> Setting up SNR > %.2f selection function ..." % (SNRCut))
    selFn=completeness.SelFn(selFnDir, SNRCut, configFileName = configFileName, zStep = 0.1)
    tab=tab[np.where(tab['fixed_SNR'] > SNRCut)]
    
    # We'll label output according to catalog file name (in case we want to run same settings on real and mocks)
    if cosmoOutDir == None:
        cosmoOutDir="cosmo_"+os.path.split(tabFileName)[-1].replace(".fits", "")+"_%.2f" % (SNRCut)
        
    # Cobaya set-up
    info={'likelihood': {'my_like': lnprob},
          'params': {'Ob0': 0.05, 
                     'tenToA0': 4.95e-5, 
                     'B0': 0.08, 
                     'Mpivot': 3.0e+14, 
                     'sigma_int': 0.2,
                     'H0':     {'prior': {'dist': 'norm', 'loc': 70.0, 'scale': 4.0},
                                'proposal': 5.0,
                                'latex': 'H_0'},
                     'Om0':    {'prior': {'min': 0.1, 'max': 0.5}, 
                                'ref': {'dist': 'norm', 'loc': 0.3, 'scale': 0.1},
                                'proposal': 0.05,
                                'latex': '\Omega_{\\rm m0}'},
                     'sigma8': {'prior': {'min': 0.6, 'max': 0.9}, 
                                'ref': {'dist': 'norm', 'loc': 0.8, 'scale': 0.1},
                                'proposal': 0.02,
                                'latex': '\sigma_8'}},
          'sampler': {'mcmc': {'burn_in': numToBurn, 'max_samples': maxSamples}},
          'output': cosmoOutDir+os.path.sep+"chains",
          'timing': True,
          'debug': True
         }
    
    updated_info, products=run(info)

    # This needs generalising? Or people can just run GetDist themselves...
    gd_sample=MCSamplesFromCobaya(updated_info, products["sample"])
    
    g=gdplt.getSubplotPlotter()
    params=['H0', 'Om0', 'sigma8']
    param_3d = None
    g.triangle_plot(gd_sample, params, plot_3d_with_param=param_3d, filled=True, shaded=False)
    g.export(fname=cosmoOutDir+os.path.sep+"cornerplot.pdf")
    g.export(fname=cosmoOutDir+os.path.sep+"cornerplot.png")

    mean=gd_sample.getMeans()[:3]   # H0, Om0, sigma8
    print("Mean:")
    print(mean)
    
