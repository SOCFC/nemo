#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# script for reading in a nemo catalog and outputting a montage of selected clusters

import sys
import os
import datetime
from nemo import *
from astLib import *
import pylab
import pickle
import glob
from PIL import Image
import numpy
import operator
pylab.matplotlib.interactive(False)

#from IPython.Shell import IPShellEmbed
#ipshell = IPShellEmbed([], banner = 'Dropping into IPython', exit_msg = 'Leaving Interpreter, back to program.')

#------------------------------------------------------------------------------------------------------------
def makeImageDict(imageOptions):
    """Makes an imageDict to allow us to make the ACT plots easily. Depends on an assumption about naming
    convention of filtered map files, and that they are yc maps.
    
    """
    
    fileNames=glob.glob(imageOptions['ACTFilteredMapsDir']+os.path.sep+"*_filteredMap.fits")
    imageDict={}
    for f in fileNames:
        label=os.path.split(f)[-1].split("_filteredMap.fits")[0]
        imageDict[label]={}
        imageDict[label]['ycFilteredMap']=f
    
    return imageDict
        
#------------------------------------------------------------------------------------------------------------
# Main
if len(sys.argv) < 2:
    print "Run: % nemomontage < .par file>"
else:
    
    parDictFileName=sys.argv[1].replace("\n", "")
    
    parDict=actDict.ACTDict()
    parDict.read_from_file(parDictFileName)

    # Add more dirs here if we add more image types (e.g. DSS, BCS, SDSSMain, whatever)
    if 'outputDir' in parDict.keys():
        if os.path.exists(parDict['outputDir']) == False:
            os.makedirs(parDict['outputDir'])
        outDir=parDict['outputDir']
        if os.path.exists(outDir+os.path.sep+"ACTImages") == False:
            os.makedirs(outDir+os.path.sep+"ACTImages")
        if parDict['imageOptions']['Stripe82Color'] == True and \
            os.path.exists(outDir+os.path.sep+"Stripe82ColorImages") == False:
                os.makedirs(outDir+os.path.sep+"Stripe82ColorImages")
    else:
        raise Exception, "didn't find 'outputDir' key"
    
    montageObjects=catalogTools.readCatalog(parDict['catalogFileName'])
    SNSorted=sorted(montageObjects, key=operator.itemgetter('SN'))
    montageObjects=SNSorted[::-1]
    
    catalogTools.addNEDInfo(montageObjects, nedDir = parDict['cacheDir']+os.path.sep+"NEDResults")
    
    imageDict=makeImageDict(parDict['imageOptions'])
    
    mapOptionsDict=parDict['imageOptions']['ACTPlotOptions']
    mapOptionsDict['remakePlots']=True
    sourceBrowser.makeACTPlots(montageObjects, imageDict, outDir+os.path.sep+"ACTImages", 
                 mapOptionsDict, colorMap = "spectral", verbose = True, 
                 noAxes = True, showLabels = 'NED')
    
    if parDict['imageOptions']['Stripe82Color'] == True:
        sourceBrowser.fetchStripe82ColorImages(montageObjects, sizeArcmin = parDict['imageOptions']['ACTPlotOptions']['plotSizeArcmin'], \
                                 jpegFolder = parDict['cacheDir']+os.path.sep+"Stripe82ColorJPEGImages", \
                                 refetch = False)
        sourceBrowser.makeSDSSDR7Plots(montageObjects, outDir+os.path.sep+"Stripe82ColorImages", \
                                       JPEGFolder = parDict['cacheDir']+os.path.sep+"Stripe82ColorJPEGImages", \
                                       sizeArcmin = mapOptionsDict['plotSizeArcmin'], remakePlots = True, \
                                       nedDir = None, plotNEDObjects = False, plotSDSSObjects = False, 
                                       noAxes = True, plotClusterPos = mapOptionsDict['plotClusterPos'], \
                                       figSize = mapOptionsDict['figSize'])
    
    print ">>> Making montage plots ..."
    numRows=parDict['imageOptions']['numRows']
    numCols=parDict['imageOptions']['numCols']
    sourceBrowser.montage(montageObjects, numCols, numRows, outDir+os.path.sep+"ACT148Montage.png", outDir+os.path.sep+"ACTImages")
    if parDict['imageOptions']['Stripe82Color'] == True:
        montage(montageObjects, numCols, numRows, outDir+os.path.sep+"Stripe82Montage.png", outDir+os.path.sep+"Stripe82ColorImages")
    